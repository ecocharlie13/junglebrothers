// /cultivoapp/js/frappe-gantt.min.js (vers√£o personalizada)

window.Gantt = class {
  constructor(selector, tasks, { ocultarPassados = false } = {}) {
    const container = document.querySelector(selector);
    container.innerHTML = "";

    const cores = ["#c084fc", "#4ade80", "#60a5fa", "#facc15", "#f472b6"];
    const grupos = {};
    const nomes = {};

    // Filtra se for para ocultar eventos passados
    const hoje = new Date();
    const inicioSemanaAtual = new Date(hoje);
    inicioSemanaAtual.setDate(hoje.getDate() - hoje.getDay());

    if (ocultarPassados) {
      tasks = tasks.filter(t => new Date(t.end) >= inicioSemanaAtual);
    }

    // Descobre intervalo total para ajustar escalas
    const datasInicio = tasks.map(t => new Date(t.start));
    const datasFim = tasks.map(t => new Date(t.end));
    const menorData = new Date(Math.min(...datasInicio));
    const maiorData = new Date(Math.max(...datasFim));
    const diasTotal = (maiorData - menorData) / (1000 * 60 * 60 * 24) + 1;

    const larguraTotal = container.clientWidth || 800;
    const pxPorDia = larguraTotal / diasTotal;

    // Agrupa por cultivo (cor e nome)
    tasks.forEach(t => {
      const grupo = t.id.split("-")[0];
      if (!grupos[grupo]) {
        grupos[grupo] = cores[Object.keys(grupos).length % cores.length];
        nomes[grupo] = t.name.match(/\((.*?)\)/)?.[1] || grupo;
      }
    });

    // Legenda
    const legenda = document.createElement("div");
    legenda.className = "flex flex-wrap items-center gap-4 mb-4";
    for (const [grupo, cor] of Object.entries(grupos)) {
      const bloco = document.createElement("div");
      bloco.className = "flex items-center gap-2 text-sm";
      bloco.innerHTML = `<span class="w-4 h-4 rounded inline-block" style="background:${cor}"></span> ${nomes[grupo]}`;
      legenda.appendChild(bloco);
    }
    container.appendChild(legenda);

    // Hoje
    const hojeLabel = document.createElement("div");
    hojeLabel.className = "text-sm text-gray-600 mb-2";
    hojeLabel.innerHTML = `<span class='text-red-600'>üìç Hoje:</span> ${hoje.toISOString().split("T")[0]}`;
    container.appendChild(hojeLabel);

    // Linha do tempo horizontal
    const dias = [];
    for (let i = 0; i < diasTotal; i++) {
      const d = new Date(menorData);
      d.setDate(d.getDate() + i);
      dias.push(d);
    }

    const grade = document.createElement("div");
    grade.className = "overflow-x-auto whitespace-nowrap";

    // Cabe√ßalho de datas
    const header = document.createElement("div");
    header.className = "flex mb-1 pl-24 text-xs text-gray-500 font-semibold";
    dias.forEach(d => {
      const cell = document.createElement("div");
      cell.className = "w-[1px] h-5 inline-block";
      cell.style.width = `${pxPorDia}px`;
      cell.textContent = formatar(d);
      cell.style.textAlign = "center";
      header.appendChild(cell);
    });
    grade.appendChild(header);

    // Cada tarefa por linha
    tasks.forEach(task => {
      const linha = document.createElement("div");
      linha.className = "flex items-center gap-2 mb-1";

      const grupo = task.id.split("-")[0];
      const cor = grupos[grupo];

      const dataInicio = document.createElement("span");
      dataInicio.className = "text-xs text-gray-500 w-14 text-right";
      dataInicio.textContent = formatar(task.start);

      const barra = document.createElement("div");
      barra.textContent = task.name.split(" (" )[0];
      barra.style.marginLeft = `${(new Date(task.start) - menorData) / (1000 * 60 * 60 * 24) * pxPorDia}px`;
      barra.style.width = `${((new Date(task.end) - new Date(task.start)) / (1000 * 60 * 60 * 24) + 1) * pxPorDia}px`;
      barra.className = "text-xs text-white text-center py-1 rounded";
      barra.style.backgroundColor = cor;

      const dataFim = document.createElement("span");
      dataFim.className = "text-xs text-gray-500 w-14";
      dataFim.textContent = formatar(task.end);

      linha.appendChild(dataInicio);
      linha.appendChild(barra);
      linha.appendChild(dataFim);
      grade.appendChild(linha);
    });

    container.appendChild(grade);

    // Bot√£o para ocultar eventos passados
    const toggleBtn = document.createElement("button");
    toggleBtn.textContent = "Ocultar eventos passados";
    toggleBtn.className = "mt-4 bg-gray-200 text-sm hover:bg-gray-300 px-3 py-1 rounded";
    toggleBtn.addEventListener("click", () => {
      new Gantt(selector, tasks.filter(t => new Date(t.end) >= inicioSemanaAtual));
    });
    container.appendChild(toggleBtn);

    function formatar(iso) {
      const meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
      const d = new Date(iso);
      return `${d.getDate().toString().padStart(2, "0")} ${meses[d.getMonth()]}`;
    }
  }
};
