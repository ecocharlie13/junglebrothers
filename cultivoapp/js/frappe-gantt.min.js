
window.Gantt = class {
  constructor(selector, tasks) {
    const container = document.querySelector(selector);
    container.innerHTML = "";

    const cores = ["#c084fc", "#4ade80", "#60a5fa", "#facc15", "#f472b6"];
    const grupos = {};
    const visiveis = tasks.filter(t => !window.ocultarPassados || new Date(t.end) >= new Date(Date.now() - 7 * 86400000));
    visiveis.forEach(t => {
      const grupo = t.id.split("-")[0];
      if (!grupos[grupo]) {
        grupos[grupo] = cores[Object.keys(grupos).length % cores.length];
      }
    });

    const hoje = new Date().toISOString().split("T")[0];
    const hojeLabel = document.createElement("div");
    hojeLabel.className = "text-sm text-gray-600 mb-2 flex items-center gap-2";
    hojeLabel.innerHTML = Object.entries(grupos).map(([k, cor]) =>
      `<span class='inline-flex items-center gap-1 text-sm'>
        <span class='w-3 h-3 rounded-sm inline-block' style='background:${cor}'></span>
        ${k.replace(/_.*/, "")}
      </span>`).join(" &nbsp; ") + `<span class='text-red-600'>üìç Hoje:</span> ${hoje}`;
    container.appendChild(hojeLabel);

    const datas = visiveis.flatMap(t => [new Date(t.start), new Date(t.end)]);
    const min = new Date(Math.min(...datas));
    const max = new Date(Math.max(...datas));
    const semanas = [];
    let ref = new Date(min);
    ref.setDate(ref.getDate() - ref.getDay());
    while (ref <= max) {
      semanas.push(new Date(ref));
      ref.setDate(ref.getDate() + 7);
    }

    const quadro = document.createElement("div");
    quadro.className = "overflow-x-auto";
    quadro.style.display = "grid";
    quadro.style.gridTemplateColumns = `80px repeat(${semanas.length}, 1fr)`;
    quadro.style.fontSize = "12px";

    const header = document.createElement("div");
    header.style.gridColumn = `span ${semanas.length + 1}`;
    header.style.display = "grid";
    header.style.gridTemplateColumns = `80px repeat(${semanas.length}, 1fr)`;
    semanas.forEach((s, i) => {
      const cell = document.createElement("div");
      cell.textContent = `Semana ${22 + i}`;
      cell.className = i % 2 === 0 ? "bg-gray-100 py-1 px-2" : "bg-white py-1 px-2";
      header.appendChild(cell);
    });
    container.appendChild(header);

    visiveis.forEach(task => {
      const row = document.createElement("div");
      row.style.gridColumn = `span ${semanas.length + 1}`;
      row.style.display = "grid";
      row.style.gridTemplateColumns = `80px repeat(${semanas.length}, 1fr)`;

      const label = document.createElement("div");
      label.textContent = formatar(task.start);
      label.className = "text-right pr-2";
      row.appendChild(label);

      const diasTotal = (max - min) / 86400000;
      const inicio = (new Date(task.start) - min) / 86400000 / diasTotal * semanas.length;
      const fim = (new Date(task.end) - min) / 86400000 / diasTotal * semanas.length;
      const left = Math.floor(inicio);
      const span = Math.ceil(fim - inicio) || 1;

      for (let i = 0; i < semanas.length; i++) {
        const cell = document.createElement("div");
        cell.className = i % 2 === 0 ? "bg-gray-50" : "bg-white";
        if (i === left) {
          const barra = document.createElement("div");
          barra.textContent = task.name;
          barra.style.backgroundColor = grupos[task.id.split("-")[0]];
          barra.className = "text-white text-center rounded py-1";
          barra.style.gridColumn = `span ${span}`;
          barra.style.whiteSpace = "nowrap";
          barra.title = `${formatar(task.start)} ‚Üí ${formatar(task.end)}`;
          cell.appendChild(barra);
        }
        row.appendChild(cell);
      }
      container.appendChild(row);
    });

    function formatar(iso) {
      const meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
      const d = new Date(iso);
      return `${d.getDate().toString().padStart(2, "0")} ${meses[d.getMonth()]}`;
    }
  }
};
