window.Gantt = class {
  constructor(selector, tasks) {
    const container = document.querySelector(selector);
    container.innerHTML = "";

    const cores = ["#c084fc", "#4ade80", "#60a5fa", "#facc15", "#f472b6"];
    const cultivos = {};
    const semanas = [];
    let dataMin = null;
    let dataMax = null;

    // Agrupar por cultivo e determinar intervalo global
    tasks.forEach(t => {
      const cultivo = t.cultivo;
      if (!cultivos[cultivo]) cultivos[cultivo] = { eventos: [], cor: null };
      cultivos[cultivo].eventos.push(t);

      const inicio = new Date(t.start);
      const fim = new Date(t.end);
      if (!dataMin || inicio < dataMin) dataMin = inicio;
      if (!dataMax || fim > dataMax) dataMax = fim;
    });

    // Atribuir cores
    Object.keys(cultivos).forEach((cultivo, i) => {
      cultivos[cultivo].cor = cores[i % cores.length];
    });

    // Calcular semanas
    const inicioSemana = new Date(dataMin);
    inicioSemana.setDate(inicioSemana.getDate() - inicioSemana.getDay());
    const fimSemana = new Date(dataMax);
    fimSemana.setDate(fimSemana.getDate() + (6 - fimSemana.getDay()));
    const semanasMap = {};
    const diasTotais = (fimSemana - inicioSemana) / (1000 * 60 * 60 * 24);
    for (let i = 0; i <= diasTotais; i++) {
      const d = new Date(inicioSemana);
      d.setDate(d.getDate() + i);
      const iso = d.toISOString().split("T")[0];
      semanas.push(iso);
      semanasMap[iso] = i;
    }

    // Cabeçalho
    const hoje = new Date().toISOString().split("T")[0];
    const hojeFmt = formatar(hoje);
    const titulo = document.createElement("h2");
    titulo.className = "text-xl font-bold mb-2 text-gray-700";
    titulo.textContent = `Calendário do Cultivo (Gantt) - ${hojeFmt}`;
    container.appendChild(titulo);

    const legenda = document.createElement("div");
    legenda.className = "flex gap-4 items-center text-sm mb-2 flex-wrap";
    Object.entries(cultivos).forEach(([cultivo, { eventos, cor }]) => {
      const inicio = formatar(eventos[0].start);
      const fim = formatar(eventos[eventos.length - 1].end);
      const item = document.createElement("div");
      item.className = "flex items-center gap-1";
      item.innerHTML = `<span class="w-3 h-3 rounded-sm inline-block" style="background:${cor}"></span> ${cultivo} (${inicio} → ${fim})`;
      legenda.appendChild(item);
    });
    container.appendChild(legenda);

    // Grade principal
    const grid = document.createElement("div");
    grid.className = "relative border border-gray-300 overflow-hidden rounded";
    container.appendChild(grid);

    const colWidth = 50;

    // Cabeçalho de semanas
    const header = document.createElement("div");
    header.className = "flex w-full";
    semanas.forEach((s, i) => {
      const col = document.createElement("div");
      col.style.width = `${colWidth}px`;
      col.className = `text-xs text-center py-1 ${i % 2 === 0 ? 'bg-gray-50' : 'bg-gray-200'}`;
      col.textContent = `Semana ${getWeekNumber(new Date(s))}`;
      header.appendChild(col);
    });
    grid.appendChild(header);

    // Linhas de eventos
    Object.entries(cultivos).forEach(([cultivo, { eventos, cor }]) => {
      eventos.forEach(ev => {
        const row = document.createElement("div");
        row.className = "flex items-center h-8 relative";

        semanas.forEach((s, i) => {
          const col = document.createElement("div");
          col.style.width = `${colWidth}px`;
          col.className = `${i % 2 === 0 ? 'bg-gray-50' : 'bg-gray-200'}`;
          row.appendChild(col);
        });

        const inicioIdx = semanasMap[ev.start];
        const fimIdx = semanasMap[ev.end];
        const bar = document.createElement("div");
        bar.className = "absolute text-xs text-white text-center py-0.5 px-1 rounded h-6 overflow-hidden whitespace-nowrap overflow-ellipsis";
        bar.style.left = `${inicioIdx * colWidth}px`;
        bar.style.width = `${(fimIdx - inicioIdx + 1) * colWidth}px`;
        bar.style.backgroundColor = cor;
        bar.textContent = ev.name;

        const dataFim = document.createElement("span");
        dataFim.className = "absolute text-xs text-gray-500 left-full ml-1";
        dataFim.style.top = "0.25rem";
        dataFim.textContent = formatar(ev.end);

        row.appendChild(bar);
        row.appendChild(dataFim);
        grid.appendChild(row);
      });
    });

    function formatar(iso) {
      const meses = ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"];
      const d = new Date(iso);
      return `${d.getDate().toString().padStart(2, "0")} ${meses[d.getMonth()]}`;
    }

    function getWeekNumber(d) {
      d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));
      const dayNum = d.getUTCDay() || 7;
      d.setUTCDate(d.getUTCDate() + 4 - dayNum);
      const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
      return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
    }
  }
};
