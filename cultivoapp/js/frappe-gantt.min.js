
function Gantt(selector, tarefas, options = {}) {
  const container = document.querySelector(selector);
  container.innerHTML = "";

  const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svg.setAttribute("width", "100%");
  svg.setAttribute("height", tarefas.length * 40 + 100);
  svg.style.background = "#fff";
  container.appendChild(svg);

  const barHeight = 20;
  const dayWidth = 20;
  const yStart = 50;

  // Agrupar por cultivo
  const grupos = {};
  tarefas.forEach(t => {
    const cultivo = t.id.split("-")[0];
    if (!grupos[cultivo]) grupos[cultivo] = [];
    grupos[cultivo].push({ ...t });
  });

  // Encadear eventos e gerar data simulada
  const eventos = [];
  Object.keys(grupos).forEach(cultivo => {
    const evs = grupos[cultivo];
    evs.sort((a, b) => parseInt(a.id.split("-")[1]) - parseInt(b.id.split("-")[1]));
    let dataBase = new Date(evs[0].start);
    evs.forEach((e, i) => {
      const inicio = new Date(dataBase);
      const dur = (new Date(e.end) - new Date(e.start)) / (1000 * 60 * 60 * 24);
      const fim = new Date(inicio);
      fim.setDate(fim.getDate() + dur);
      eventos.push({
        ...e,
        _start: new Date(inicio),
        _end: new Date(fim),
        _codigo: `${cultivo} - ${String(i + 1).padStart(2, '0')}`,
        _dur: dur
      });
      dataBase = new Date(fim);
    });
  });

  // Escala real: menor e maior data
  const min = new Date(Math.min(...eventos.map(e => e._start)));
  const max = new Date(Math.max(...eventos.map(e => e._end)));
  const diasTotal = (max - min) / (1000 * 60 * 60 * 24) + 1;

  // Render eixo
  for (let i = 0; i < diasTotal; i++) {
    const data = new Date(min);
    data.setDate(data.getDate() + i);
    if (data.getDate() === 1 || i % 5 === 0) {
      const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
      text.setAttribute("x", 50 + i * dayWidth);
      text.setAttribute("y", 20);
      text.setAttribute("font-size", "10px");
      text.setAttribute("fill", "#666");
      text.textContent = data.toLocaleDateString("pt-BR", { day: "2-digit", month: "short" });
      svg.appendChild(text);
    }
  }

  // Cores por fase
  const cores = {
    Clonar: "#0ea5e9",
    Enraizar: "#22c55e",
    Vega: "#4ade80",
    Estiramento: "#a78bfa",
    Engorda: "#facc15",
    Finalizacao: "#f97316",
    Colheita: "#f43f5e",
    Transplantar: "#06b6d4",
    Tamponar: "#eab308",
    "Espetar clones": "#38bdf8"
  };

  eventos.forEach((e, idx) => {
    const x = 50 + (e._start - min) / (1000 * 60 * 60 * 24) * dayWidth;
    const w = Math.max(1, (e._end - e._start) / (1000 * 60 * 60 * 24)) * dayWidth;
    const y = yStart + idx * 40;

    const cor = Object.entries(cores).find(([k]) => e.name.toLowerCase().includes(k.toLowerCase()))?.[1] || "#6ee7b7";

    const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect.setAttribute("x", x);
    rect.setAttribute("y", y);
    rect.setAttribute("width", w);
    rect.setAttribute("height", barHeight);
    rect.setAttribute("rx", "4");
    rect.setAttribute("fill", cor);
    rect.setAttribute("stroke", "#333");
    rect.setAttribute("stroke-width", "0.2");
    rect.setAttribute("title", `${e.name} (${e._dur} dias)`);
    svg.appendChild(rect);

    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
    text.setAttribute("x", x + 4);
    text.setAttribute("y", y + barHeight / 1.5);
    text.setAttribute("font-size", "11px");
    text.setAttribute("fill", "black");
    text.textContent = `${e._codigo} ${e.name}`;
    svg.appendChild(text);
  });

  console.log("Gantt estilo MS Project renderizado com sucesso");
}
window.Gantt = Gantt;
